type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(1000)
#fits model
model.lda<-train(x = trainset[,1:4],y = trainset[,5], method = "lda",metric = "Accuracy")
#prints model
print(model.lda)
#verifies accuracy on 'trainset'
pred<-predict(object = model.lda,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.lda,newdata = testset[,1:4])
confusionMatrix(pred_test,testset$Species)
model <- randomForest(Species~.,data=trainset,ntree=100,proximity=TRUE)
print(model)
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model,newdata = testset[,1:4],type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(124) #for reproducability
model.gbm <- train(Species~.,data = trainset,
method = "gbm", trControl = ctrl, tuneGrid = grid))
set.seed(124) #for reproducability
model.gbm <- train(Species~.,data = trainset,
method = "gbm", trControl = ctrl, tuneGrid = grid)
remove.packages("gbm", lib="~/R/win-library/4.1")
install.packages("gbm", lib="C:/Program Files/R/R-4.1.1/library")
knitr::opts_chunk$set(echo = TRUE)
library(gbm)
set.seed(124) #for reproducability
model.gbm <- train(Species~.,data = trainset,
method = "gbm", trControl = ctrl, tuneGrid = grid)
library(gbm)
set.seed(124) #for reproducability
model.gbm <- train(x = trainset[,1:4],y = trainset[,5], method = "gbm",metric = "Accuracy")
library(gbm)
set.seed(124) #for reproducability
model <- train(Species~.,data = trainset,
method = "gbm", trControl = ctrl, tuneGrid = grid)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(MASS)
#brings data into environment from within R
data(iris)
#gets help on dataset
help(iris)
#renames dataset
iris_dataset<-iris
#views dataset
View(iris_dataset)
#prints first couple of rows
head(iris)
#creates a partition (80% training, 20% testing)
index <- createDataPartition(iris_dataset$Species, p=0.80, list=FALSE)
#selects 20% of the data for testing
testset <- iris_dataset[-index,]
#selects 80% of data to train models
trainset <- iris_dataset[index,]
#gets dimensions of the dataset
dim(trainset)
#gets structure of the dataset
str(trainset)
#gets summary of the dataset
summary(trainset)
#gets levels of the prediction column
levels(trainset$Species)
#histogram: frequency of Sepal Width
hist(trainset$Sepal.Width)
#box plot: how distribution varies by class of flower
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(trainset[,i], main=names(trainset)[i])
}
#creates base scatter plot
base <- ggplot(data=trainset, aes(x = Petal.Length, y = Petal.Width))
print(base)
#scatter plot: distribution of species based on Petal Length and Width
scatter <-base +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length-Width")+
geom_smooth(method="lm")
print(scatter)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
print(box)
#histogram: frequency of species of flower based on Sepal Width
histo <- ggplot(data=iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Width") +
ylab("Frequency") +
ggtitle("Histogram of Sepal Width")
print(histo)
#faceting: distribution of all species' Sepal Lengths and Widths
face <- ggplot(data=trainset, aes(Sepal.Length, y=Sepal.Width, color=Species))+
geom_point(aes(shape=Species), size=1.5) +
geom_smooth(method="lm") +
xlab("Sepal Length") +
ylab("Sepal Width") +
ggtitle("Faceting") +
facet_grid(. ~ Species)
print(face)
model <- rpart(Species~.,data=trainset,method = 'class')
print(model)
rpart.plot(model)
#predictions on 'trainset'
treePred <- predict(model,newdata=testset[-5],type = 'class')
treePred
#checks accuracy using a confusion matrix by comparing predictions to actual classifications
confusionMatrix(predict(object = model,newdata = trainset[,1:4],type="class"),trainset$Species)
#checks accuracy on 'testset'
pred_test<-predict(object = model,
newdata = testset[,1:4],
type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(1000)
#fits model
model.lda<-train(x = trainset[,1:4],y = trainset[,5], method = "lda",metric = "Accuracy")
#prints model
print(model.lda)
#verifies accuracy on 'trainset'
pred<-predict(object = model.lda,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.lda,newdata = testset[,1:4])
confusionMatrix(pred_test,testset$Species)
model <- randomForest(Species~.,data=trainset,ntree=100,proximity=TRUE)
print(model)
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model,newdata = testset[,1:4],type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(124)
model <- train(Species~.,data = trainset,method = "gbm")
set.seed(124)
model <- train(Species~.,data = trainset,method = "gbm")
print(model)
#verifies accuracy on 'trainset'
pred<-predict(object = model,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
confusionMatrix(pred_test,testset$Species)
#sets seed to ensure reproduceability
set.seed(20)
irisCluster <- kmeans(iris[, 1:4], centers = 3, nstart = 20)
irisCluster
#checks classification accuracy
table(irisCluster$cluster, iris$Species)
plot(iris[c("Sepal.Length", "Sepal.Width")], col=irisCluster$cluster)
points(irisCluster$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
#summarizes accuracy of models
results <- resamples(list(TREE=model.rpart, RandomForest=model.rf, GBM=model.gbm, LDA=model.lda))
model.rpart <- rpart(Species~.,data=trainset,method = 'class')
print(model.rpart)
rpart.plot(model.rpart)
#predictions on 'trainset'
treePred <- predict(model.rpart,newdata=testset[-5],type = 'class')
treePred
#checks accuracy using a confusion matrix by comparing predictions to actual classifications
confusionMatrix(predict(object = model.rpart,newdata = trainset[,1:4],type="class"),trainset$Species)
#checks accuracy on 'testset'
pred_test<-predict(object = model.rpart,
newdata = testset[,1:4],
type="class")
confusionMatrix(pred_test,testset$Species)
model.rf <- randomForest(Species~.,data=trainset,ntree=100,proximity=TRUE)
print(model.rf)
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.rf,newdata = testset[,1:4],type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(124)
model.gbm <- train(Species~.,data = trainset,method = "gbm")
print(model.gbm)
#verifies accuracy on 'trainset'
pred<-predict(object = model.gbm,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
confusionMatrix(pred_test,testset$Species)
#summarizes accuracy of models
results <- resamples(list(TREE=model.rpart, RandomForest=model.rf, GBM=model.gbm, LDA=model.lda))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(MASS)
#brings data into environment from within R
data(iris)
#gets help on dataset
help(iris)
#renames dataset
iris_dataset<-iris
#views dataset
View(iris_dataset)
#prints first couple of rows
head(iris)
#creates a partition (80% training, 20% testing)
index <- createDataPartition(iris_dataset$Species, p=0.80, list=FALSE)
#selects 20% of the data for testing
testset <- iris_dataset[-index,]
#selects 80% of data to train models
trainset <- iris_dataset[index,]
#gets dimensions of the dataset
dim(trainset)
#gets structure of the dataset
str(trainset)
#gets summary of the dataset
summary(trainset)
#gets levels of the prediction column
levels(trainset$Species)
#histogram: frequency of Sepal Width
hist(trainset$Sepal.Width)
#box plot: how distribution varies by class of flower
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(trainset[,i], main=names(trainset)[i])
}
#creates base scatter plot
base <- ggplot(data=trainset, aes(x = Petal.Length, y = Petal.Width))
print(base)
#scatter plot: distribution of species based on Petal Length and Width
scatter <-base +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length-Width")+
geom_smooth(method="lm")
print(scatter)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
print(box)
#histogram: frequency of species of flower based on Sepal Width
histo <- ggplot(data=iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Width") +
ylab("Frequency") +
ggtitle("Histogram of Sepal Width")
print(histo)
#faceting: distribution of all species' Sepal Lengths and Widths
face <- ggplot(data=trainset, aes(Sepal.Length, y=Sepal.Width, color=Species))+
geom_point(aes(shape=Species), size=1.5) +
geom_smooth(method="lm") +
xlab("Sepal Length") +
ylab("Sepal Width") +
ggtitle("Faceting") +
facet_grid(. ~ Species)
print(face)
model.rpart <- rpart(Species~.,data=trainset,method = 'class')
print(model.rpart)
rpart.plot(model.rpart)
#predictions on 'trainset'
treePred <- predict(model.rpart,newdata=testset[-5],type = 'class')
treePred
#checks accuracy using a confusion matrix by comparing predictions to actual classifications
confusionMatrix(predict(object = model.rpart,newdata = trainset[,1:4],type="class"),trainset$Species)
#checks accuracy on 'testset'
pred_test<-predict(object = model.rpart,
newdata = testset[,1:4],
type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(1000)
#fits model
model.lda<-train(x = trainset[,1:4],y = trainset[,5], method = "lda",metric = "Accuracy")
#prints model
print(model.lda)
#verifies accuracy on 'trainset'
pred<-predict(object = model.lda,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.lda,newdata = testset[,1:4])
confusionMatrix(pred_test,testset$Species)
model.rf <- randomForest(Species~.,data=trainset,ntree=100,proximity=TRUE)
print(model.rf)
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.rf,newdata = testset[,1:4],type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(124)
model.gbm <- train(Species~.,data = trainset,method = "gbm")
print(model.gbm)
#verifies accuracy on 'trainset'
pred<-predict(object = model.gbm,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
confusionMatrix(pred_test,testset$Species)
#sets seed to ensure reproduceability
set.seed(20)
irisCluster <- kmeans(iris[, 1:4], centers = 3, nstart = 20)
irisCluster
#checks classification accuracy
table(irisCluster$cluster, iris$Species)
plot(iris[c("Sepal.Length", "Sepal.Width")], col=irisCluster$cluster)
points(irisCluster$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
#summarizes accuracy of models
results <- resamples(list(TREE=model.rpart, RandomForest=model.rf, GBM=model.gbm, LDA=model.lda))
knitr::opts_chunk$set(echo = TRUE)
#summarizes accuracy of models
results <- resamples(list(TREE=model.rpart, RandomForest=model.rf, GBM=model.gbm, LDA=model.lda))
knitr::opts_chunk$set(echo = TRUE)
#checks classification accuracy
table(irisCluster$cluster, iris$Species)
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(MASS)
#brings data into environment from within R
data(iris)
#gets help on dataset
help(iris)
#renames dataset
iris_dataset<-iris
#views dataset
View(iris_dataset)
#prints first couple of rows
head(iris)
#creates a partition (80% training, 20% testing)
index <- createDataPartition(iris_dataset$Species, p=0.80, list=FALSE)
#selects 20% of the data for testing
testset <- iris_dataset[-index,]
#selects 80% of data to train models
trainset <- iris_dataset[index,]
#gets dimensions of the dataset
dim(trainset)
#gets structure of the dataset
str(trainset)
#gets summary of the dataset
summary(trainset)
#gets levels of the prediction column
levels(trainset$Species)
#histogram: frequency of Sepal Width
hist(trainset$Sepal.Width)
#box plot: how distribution varies by class of flower
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(trainset[,i], main=names(trainset)[i])
}
#creates base scatter plot
base <- ggplot(data=trainset, aes(x = Petal.Length, y = Petal.Width))
print(base)
#scatter plot: distribution of species based on Petal Length and Width
scatter <-base +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length-Width")+
geom_smooth(method="lm")
print(scatter)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
print(box)
#histogram: frequency of species of flower based on Sepal Width
histo <- ggplot(data=iris, aes(x=Sepal.Width)) +
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Width") +
ylab("Frequency") +
ggtitle("Histogram of Sepal Width")
print(histo)
#faceting: distribution of all species' Sepal Lengths and Widths
face <- ggplot(data=trainset, aes(Sepal.Length, y=Sepal.Width, color=Species))+
geom_point(aes(shape=Species), size=1.5) +
geom_smooth(method="lm") +
xlab("Sepal Length") +
ylab("Sepal Width") +
ggtitle("Faceting") +
facet_grid(. ~ Species)
print(face)
model.rpart <- rpart(Species~.,data=trainset,method = 'class')
print(model.rpart)
rpart.plot(model.rpart)
#predictions on 'trainset'
treePred <- predict(model.rpart,newdata=testset[-5],type = 'class')
treePred
#checks accuracy using a confusion matrix by comparing predictions to actual classifications
confusionMatrix(predict(object = model.rpart,newdata = trainset[,1:4],type="class"),trainset$Species)
#checks accuracy on 'testset'
pred_test<-predict(object = model.rpart,
newdata = testset[,1:4],
type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(1000)
#fits model
model.lda<-train(x = trainset[,1:4],y = trainset[,5], method = "lda",metric = "Accuracy")
#prints model
print(model.lda)
#verifies accuracy on 'trainset'
pred<-predict(object = model.lda,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.lda,newdata = testset[,1:4])
confusionMatrix(pred_test,testset$Species)
model.rf <- randomForest(Species~.,data=trainset,ntree=100,proximity=TRUE)
print(model.rf)
confusionMatrix(pred,trainset$Species)
#verifies accuracy on 'testset'
pred_test<-predict(object = model.rf,newdata = testset[,1:4],type="class")
confusionMatrix(pred_test,testset$Species)
set.seed(124)
model.gbm <- train(Species~.,data = trainset,method = "gbm")
print(model.gbm)
#verifies accuracy on 'trainset'
pred<-predict(object = model.gbm,newdata = trainset[,1:4])
confusionMatrix(pred,trainset$Species)
confusionMatrix(pred_test,testset$Species)
#sets seed to ensure reproduceability
set.seed(20)
irisCluster <- kmeans(iris[, 1:4], centers = 3, nstart = 20)
irisCluster
#checks classification accuracy
table(irisCluster$cluster, iris$Species)
plot(iris[c("Sepal.Length", "Sepal.Width")], col=irisCluster$cluster)
points(irisCluster$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
#checks classification accuracy
table(irisCluster$cluster, iris$Species)
knitr::opts_chunk$set(echo = TRUE)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun=mean, geom="point", shape=5, size=4)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
knitr::opts_chunk$set(echo = TRUE)
# Packages!
library(tidyverse)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(MASS)
#brings data into environment from within R
data(iris)
#help for dataset
help(iris)
#renames dataset
iris_dataset<-iris
#views dataset
View(iris_dataset)
#prints first couple of rows
head(iris)
#creates a partition (80% training, 20% testing)
index <- createDataPartition(iris_dataset$Species, p=0.80, list=FALSE)
#selects 20% of the data for testing
testset <- iris_dataset[-index,]
#selects 80% of data to train models
trainset <- iris_dataset[index,]
#gets dimensions of the dataset
dim(trainset)
#gets structure of the dataset
str(trainset)
#gets summary of the dataset
summary(trainset)
#gets levels of the prediction column
levels(trainset$Species)
#histogram: frequency of Sepal Width
hist(trainset$Sepal.Width)
#box plot: how distribution varies by class of flower
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(trainset[,i], main=names(trainset)[i])
}
#creates base scatter plot
base <- ggplot(data=trainset, aes(x = Petal.Length, y = Petal.Width))
print(base)
#scatter plot: distribution of species based on Petal Length and Width
scatter <-base +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length-Width")+
geom_smooth(method="lm")
print(scatter)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun.y=mean, geom="point", shape=5, size=4)
print(box)
#box plot: distribution of Species based on Sepal Length
box <- ggplot(data=trainset, aes(x=Species, y=Sepal.Length)) +
geom_boxplot(aes(fill=Species)) +
ylab("Sepal Length") +
ggtitle("Iris Boxplot") +
stat_summary(fun=mean, geom="point", shape=5, size=4)
print(box)
